//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::QSQDogeBlockHeader;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct AppendBlock {
    /// The program derived address of the qed_doge_ibc account to increment (seeds: ['qed_doge_ibc', authority])
    pub qed_doge_ibc: solana_program::pubkey::Pubkey,
    /// The authority of the qed_doge_ibc
    pub authority: solana_program::pubkey::Pubkey,
}

impl AppendBlock {
    pub fn instruction(
        &self,
        args: AppendBlockInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AppendBlockInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.qed_doge_ibc,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&AppendBlockInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::QED_SOLANA_DOGE_IBC_V3_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AppendBlockInstructionData {
    discriminator: u8,
}

impl AppendBlockInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 1 }
    }
}

impl Default for AppendBlockInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AppendBlockInstructionArgs {
    pub block_number: u32,
    pub pow_hash_mode: u8,
    pub block_header: QSQDogeBlockHeader,
}

/// Instruction builder for `AppendBlock`.
///
/// ### Accounts:
///
///   0. `[writable]` qed_doge_ibc
///   1. `[signer]` authority
#[derive(Clone, Debug, Default)]
pub struct AppendBlockBuilder {
    qed_doge_ibc: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    block_number: Option<u32>,
    pow_hash_mode: Option<u8>,
    block_header: Option<QSQDogeBlockHeader>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AppendBlockBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The program derived address of the qed_doge_ibc account to increment (seeds: ['qed_doge_ibc', authority])
    #[inline(always)]
    pub fn qed_doge_ibc(&mut self, qed_doge_ibc: solana_program::pubkey::Pubkey) -> &mut Self {
        self.qed_doge_ibc = Some(qed_doge_ibc);
        self
    }
    /// The authority of the qed_doge_ibc
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn block_number(&mut self, block_number: u32) -> &mut Self {
        self.block_number = Some(block_number);
        self
    }
    #[inline(always)]
    pub fn pow_hash_mode(&mut self, pow_hash_mode: u8) -> &mut Self {
        self.pow_hash_mode = Some(pow_hash_mode);
        self
    }
    #[inline(always)]
    pub fn block_header(&mut self, block_header: QSQDogeBlockHeader) -> &mut Self {
        self.block_header = Some(block_header);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AppendBlock {
            qed_doge_ibc: self.qed_doge_ibc.expect("qed_doge_ibc is not set"),
            authority: self.authority.expect("authority is not set"),
        };
        let args = AppendBlockInstructionArgs {
            block_number: self.block_number.clone().expect("block_number is not set"),
            pow_hash_mode: self
                .pow_hash_mode
                .clone()
                .expect("pow_hash_mode is not set"),
            block_header: self.block_header.clone().expect("block_header is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `append_block` CPI accounts.
pub struct AppendBlockCpiAccounts<'a, 'b> {
    /// The program derived address of the qed_doge_ibc account to increment (seeds: ['qed_doge_ibc', authority])
    pub qed_doge_ibc: &'b solana_program::account_info::AccountInfo<'a>,
    /// The authority of the qed_doge_ibc
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `append_block` CPI instruction.
pub struct AppendBlockCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The program derived address of the qed_doge_ibc account to increment (seeds: ['qed_doge_ibc', authority])
    pub qed_doge_ibc: &'b solana_program::account_info::AccountInfo<'a>,
    /// The authority of the qed_doge_ibc
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AppendBlockInstructionArgs,
}

impl<'a, 'b> AppendBlockCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AppendBlockCpiAccounts<'a, 'b>,
        args: AppendBlockInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            qed_doge_ibc: accounts.qed_doge_ibc,
            authority: accounts.authority,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.qed_doge_ibc.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&AppendBlockInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::QED_SOLANA_DOGE_IBC_V3_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.qed_doge_ibc.clone());
        account_infos.push(self.authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AppendBlock` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` qed_doge_ibc
///   1. `[signer]` authority
#[derive(Clone, Debug)]
pub struct AppendBlockCpiBuilder<'a, 'b> {
    instruction: Box<AppendBlockCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AppendBlockCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AppendBlockCpiBuilderInstruction {
            __program: program,
            qed_doge_ibc: None,
            authority: None,
            block_number: None,
            pow_hash_mode: None,
            block_header: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The program derived address of the qed_doge_ibc account to increment (seeds: ['qed_doge_ibc', authority])
    #[inline(always)]
    pub fn qed_doge_ibc(
        &mut self,
        qed_doge_ibc: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.qed_doge_ibc = Some(qed_doge_ibc);
        self
    }
    /// The authority of the qed_doge_ibc
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn block_number(&mut self, block_number: u32) -> &mut Self {
        self.instruction.block_number = Some(block_number);
        self
    }
    #[inline(always)]
    pub fn pow_hash_mode(&mut self, pow_hash_mode: u8) -> &mut Self {
        self.instruction.pow_hash_mode = Some(pow_hash_mode);
        self
    }
    #[inline(always)]
    pub fn block_header(&mut self, block_header: QSQDogeBlockHeader) -> &mut Self {
        self.instruction.block_header = Some(block_header);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = AppendBlockInstructionArgs {
            block_number: self
                .instruction
                .block_number
                .clone()
                .expect("block_number is not set"),
            pow_hash_mode: self
                .instruction
                .pow_hash_mode
                .clone()
                .expect("pow_hash_mode is not set"),
            block_header: self
                .instruction
                .block_header
                .clone()
                .expect("block_header is not set"),
        };
        let instruction = AppendBlockCpi {
            __program: self.instruction.__program,

            qed_doge_ibc: self
                .instruction
                .qed_doge_ibc
                .expect("qed_doge_ibc is not set"),

            authority: self.instruction.authority.expect("authority is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AppendBlockCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    qed_doge_ibc: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    block_number: Option<u32>,
    pow_hash_mode: Option<u8>,
    block_header: Option<QSQDogeBlockHeader>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
