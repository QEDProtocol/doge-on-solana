use qed_solana_doge_ibc_v3_program_client::{
    doge_chain_state::QEDDogeChainState,
    helpers::{blob_buffer::BlobBufferHelper, instruction_data::gen_instruction_data_create},
    instructions::CreateBuilder,
};
use solana_client::nonblocking::rpc_client::RpcClient;
use solana_program_test::tokio;
use solana_sdk::hash::Hash;
use solana_sdk::{
    instruction::{AccountMeta, Instruction},
    pubkey::Pubkey,
    signature::{Keypair, Signer},
    transaction::Transaction,
};
use zerocopy::FromBytes;

const TEST_SER_QED_STATE: [u8; 6414] = hex_literal::hex!(""
);

struct TestContext {
    client: RpcClient,
    payer: Keypair,
    last_blockhash: Hash,
}
impl TestContext {
    async fn setup_account() -> anyhow::Result<Self> {
        let client = RpcClient::new("http://127.0.0.1:8899".to_string());
        let payer = Keypair::from_base58_string(
            "3aQSf1fzHm1ueckkgYz7JPfj6LGJ6nRaNMZ2gdRJ8TkF5xEBBwjatc2QAtKXhNpVPSS5Mxx4w4yLUzwKKHQkozQ5",
        );
        let sig = client
            .request_airdrop(&payer.pubkey(), 100_100_000_000_000)
            .await?;
        client.poll_for_signature_confirmation(&sig, 10).await?;
        let last_blockhash = client.get_latest_blockhash().await?;

        Ok(Self {
            client,
            payer,
            last_blockhash,
        })
    }
}

fn find_pda_ibc(payer: &Pubkey) -> (Pubkey, u8) {
    Pubkey::find_program_address(
        &[b"qed_doge_ibc", payer.as_ref()],
        &qed_solana_doge_ibc_v3_program_client::ID,
    )
}
async fn run_simple_init_test() -> Result<(), Box<dyn std::error::Error>> {
    let tctx = TestContext::setup_account().await?;
    println!("setup account");

    let pp2 = QEDDogeChainState::ref_from_bytes(&TEST_SER_QED_STATE)
        .unwrap()
        .clone();

    let create_ix_blob = gen_instruction_data_create(&pp2);

    println!("create_ix_blob: {}", hex::encode(&create_ix_blob));

    let buffer_helper =
        BlobBufferHelper::new(&tctx.client, &tctx.payer, create_ix_blob.len()).await?;

    println!(
        "new_account_signer: {:?}",
        buffer_helper.new_account_signer.pubkey()
    );
    buffer_helper
        .send_write_transactions_and_confirm(&tctx.client, &tctx.payer, &create_ix_blob, 600)
        .await?;

    let account = tctx
        .client
        .get_account_data(&buffer_helper.new_account_signer.pubkey())
        .await?;
    println!("got account_data: {}", hex::encode(account));

    tokio::time::sleep(tokio::time::Duration::from_secs(30)).await;
    let account = tctx
        .client
        .get_account_data(&buffer_helper.new_account_signer.pubkey())
        .await?;
    println!("got account_data: {}", hex::encode(account));

    let qed_doge_ibc_address = find_pda_ibc(&tctx.payer.pubkey()).0;
    let ix = CreateBuilder::new()
        .qed_doge_ibc(qed_doge_ibc_address)
        .authority(tctx.payer.pubkey())
        .payer(tctx.payer.pubkey())
        .init_data(Vec::new())
        .instruction();

    let dummy_ix = Instruction {
        program_id: ix.program_id,
        accounts: [
            ix.accounts,
            vec![AccountMeta::new(
                buffer_helper.new_account_signer.pubkey(),
                false,
            )],
        ]
        .concat(),
        data: Vec::new(),
    };
    let last_blockhash = tctx.client.get_latest_blockhash().await.unwrap();

    let tx = Transaction::new_signed_with_payer(
        &[dummy_ix],
        Some(&tctx.payer.pubkey()),
        &[&tctx.payer],
        last_blockhash,
    );

    println!("created dummy transaction");
    tctx.client.send_and_confirm_transaction(&tx).await?;

    println!("ibc verifier created: {:?}", qed_doge_ibc_address);


    Ok(())
}
#[tokio::test]
async fn create() {
    run_simple_init_test().await.unwrap();
}
