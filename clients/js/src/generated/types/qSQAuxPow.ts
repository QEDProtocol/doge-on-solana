/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getQSBTCTransactionDecoder,
  getQSBTCTransactionEncoder,
  getQSQMerkleBranchDecoder,
  getQSQMerkleBranchEncoder,
  getQSQStandardBlockHeaderDecoder,
  getQSQStandardBlockHeaderEncoder,
  type QSBTCTransaction,
  type QSBTCTransactionArgs,
  type QSQMerkleBranch,
  type QSQMerkleBranchArgs,
  type QSQStandardBlockHeader,
  type QSQStandardBlockHeaderArgs,
} from '.';

export type QSQAuxPow = {
  coinbaseTransaction: QSBTCTransaction;
  blockHash: ReadonlyUint8Array;
  coinbaseBranch: QSQMerkleBranch;
  blockchainBranch: QSQMerkleBranch;
  parentBlock: QSQStandardBlockHeader;
};

export type QSQAuxPowArgs = {
  coinbaseTransaction: QSBTCTransactionArgs;
  blockHash: ReadonlyUint8Array;
  coinbaseBranch: QSQMerkleBranchArgs;
  blockchainBranch: QSQMerkleBranchArgs;
  parentBlock: QSQStandardBlockHeaderArgs;
};

export function getQSQAuxPowEncoder(): Encoder<QSQAuxPowArgs> {
  return getStructEncoder([
    ['coinbaseTransaction', getQSBTCTransactionEncoder()],
    ['blockHash', fixEncoderSize(getBytesEncoder(), 32)],
    ['coinbaseBranch', getQSQMerkleBranchEncoder()],
    ['blockchainBranch', getQSQMerkleBranchEncoder()],
    ['parentBlock', getQSQStandardBlockHeaderEncoder()],
  ]);
}

export function getQSQAuxPowDecoder(): Decoder<QSQAuxPow> {
  return getStructDecoder([
    ['coinbaseTransaction', getQSBTCTransactionDecoder()],
    ['blockHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['coinbaseBranch', getQSQMerkleBranchDecoder()],
    ['blockchainBranch', getQSQMerkleBranchDecoder()],
    ['parentBlock', getQSQStandardBlockHeaderDecoder()],
  ]);
}

export function getQSQAuxPowCodec(): Codec<QSQAuxPowArgs, QSQAuxPow> {
  return combineCodec(getQSQAuxPowEncoder(), getQSQAuxPowDecoder());
}
