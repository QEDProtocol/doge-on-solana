/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import { getKeyDecoder, getKeyEncoder, type Key, type KeyArgs } from '../types';

export type QEDDogeIBC = { key: Key; authority: Address; value: number };

export type QEDDogeIBCArgs = {
  key: KeyArgs;
  authority: Address;
  value: number;
};

export function getQEDDogeIBCEncoder(): Encoder<QEDDogeIBCArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['authority', getAddressEncoder()],
    ['value', getU32Encoder()],
  ]);
}

export function getQEDDogeIBCDecoder(): Decoder<QEDDogeIBC> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['value', getU32Decoder()],
  ]);
}

export function getQEDDogeIBCCodec(): Codec<QEDDogeIBCArgs, QEDDogeIBC> {
  return combineCodec(getQEDDogeIBCEncoder(), getQEDDogeIBCDecoder());
}

export function decodeQEDDogeIBC<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<QEDDogeIBC, TAddress>;
export function decodeQEDDogeIBC<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<QEDDogeIBC, TAddress>;
export function decodeQEDDogeIBC<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<QEDDogeIBC, TAddress> | MaybeAccount<QEDDogeIBC, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getQEDDogeIBCDecoder()
  );
}

export async function fetchQEDDogeIBC<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<QEDDogeIBC, TAddress>> {
  const maybeAccount = await fetchMaybeQEDDogeIBC(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeQEDDogeIBC<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<QEDDogeIBC, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeQEDDogeIBC(maybeAccount);
}

export async function fetchAllQEDDogeIBC(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<QEDDogeIBC>[]> {
  const maybeAccounts = await fetchAllMaybeQEDDogeIBC(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeQEDDogeIBC(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<QEDDogeIBC>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeQEDDogeIBC(maybeAccount));
}

export function getQEDDogeIBCSize(): number {
  return 37;
}
