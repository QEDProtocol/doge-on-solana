/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { QED_SOLANA_DOGE_IBC_V3_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getQSQDogeBlockHeaderDecoder,
  getQSQDogeBlockHeaderEncoder,
  type QSQDogeBlockHeader,
  type QSQDogeBlockHeaderArgs,
} from '../types';

export const APPEND_BLOCK_Z_K_P_DISCRIMINATOR = 2;

export function getAppendBlockZKPDiscriminatorBytes() {
  return getU8Encoder().encode(APPEND_BLOCK_Z_K_P_DISCRIMINATOR);
}

export type AppendBlockZKPInstruction<
  TProgram extends
    string = typeof QED_SOLANA_DOGE_IBC_V3_PROGRAM_PROGRAM_ADDRESS,
  TAccountQedDogeIbc extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountQedDogeIbc extends string
        ? WritableAccount<TAccountQedDogeIbc>
        : TAccountQedDogeIbc,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type AppendBlockZKPInstructionData = {
  discriminator: number;
  blockNumber: number;
  powHashMode: number;
  knownPowHash: ReadonlyUint8Array;
  blockHeader: QSQDogeBlockHeader;
  scryptProof: ReadonlyUint8Array;
};

export type AppendBlockZKPInstructionDataArgs = {
  blockNumber: number;
  powHashMode: number;
  knownPowHash: ReadonlyUint8Array;
  blockHeader: QSQDogeBlockHeaderArgs;
  scryptProof: ReadonlyUint8Array;
};

export function getAppendBlockZKPInstructionDataEncoder(): Encoder<AppendBlockZKPInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['blockNumber', getU32Encoder()],
      ['powHashMode', getU8Encoder()],
      ['knownPowHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['blockHeader', getQSQDogeBlockHeaderEncoder()],
      ['scryptProof', fixEncoderSize(getBytesEncoder(), 260)],
    ]),
    (value) => ({ ...value, discriminator: APPEND_BLOCK_Z_K_P_DISCRIMINATOR })
  );
}

export function getAppendBlockZKPInstructionDataDecoder(): Decoder<AppendBlockZKPInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['blockNumber', getU32Decoder()],
    ['powHashMode', getU8Decoder()],
    ['knownPowHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['blockHeader', getQSQDogeBlockHeaderDecoder()],
    ['scryptProof', fixDecoderSize(getBytesDecoder(), 260)],
  ]);
}

export function getAppendBlockZKPInstructionDataCodec(): Codec<
  AppendBlockZKPInstructionDataArgs,
  AppendBlockZKPInstructionData
> {
  return combineCodec(
    getAppendBlockZKPInstructionDataEncoder(),
    getAppendBlockZKPInstructionDataDecoder()
  );
}

export type AppendBlockZKPInput<
  TAccountQedDogeIbc extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** The program derived address of the qed_doge_ibc account to increment (seeds: ['qed_doge_ibc', authority]) */
  qedDogeIbc: Address<TAccountQedDogeIbc>;
  /** The authority of the qed_doge_ibc */
  authority: TransactionSigner<TAccountAuthority>;
  blockNumber: AppendBlockZKPInstructionDataArgs['blockNumber'];
  powHashMode: AppendBlockZKPInstructionDataArgs['powHashMode'];
  knownPowHash: AppendBlockZKPInstructionDataArgs['knownPowHash'];
  blockHeader: AppendBlockZKPInstructionDataArgs['blockHeader'];
  scryptProof: AppendBlockZKPInstructionDataArgs['scryptProof'];
};

export function getAppendBlockZKPInstruction<
  TAccountQedDogeIbc extends string,
  TAccountAuthority extends string,
  TProgramAddress extends
    Address = typeof QED_SOLANA_DOGE_IBC_V3_PROGRAM_PROGRAM_ADDRESS,
>(
  input: AppendBlockZKPInput<TAccountQedDogeIbc, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): AppendBlockZKPInstruction<
  TProgramAddress,
  TAccountQedDogeIbc,
  TAccountAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? QED_SOLANA_DOGE_IBC_V3_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    qedDogeIbc: { value: input.qedDogeIbc ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.qedDogeIbc),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getAppendBlockZKPInstructionDataEncoder().encode(
      args as AppendBlockZKPInstructionDataArgs
    ),
  } as AppendBlockZKPInstruction<
    TProgramAddress,
    TAccountQedDogeIbc,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedAppendBlockZKPInstruction<
  TProgram extends
    string = typeof QED_SOLANA_DOGE_IBC_V3_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The program derived address of the qed_doge_ibc account to increment (seeds: ['qed_doge_ibc', authority]) */
    qedDogeIbc: TAccountMetas[0];
    /** The authority of the qed_doge_ibc */
    authority: TAccountMetas[1];
  };
  data: AppendBlockZKPInstructionData;
};

export function parseAppendBlockZKPInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAppendBlockZKPInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      qedDogeIbc: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getAppendBlockZKPInstructionDataDecoder().decode(instruction.data),
  };
}
